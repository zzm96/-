%检验Levinson-Durbin算法
%步骤：
% 1.给出一个2阶自回归模型x(n)=-0.81*x(n-2)+u(n)(u(n)为方差为1的高斯白噪声）,用一个AR(2)模型估计已知模型的功率谱
% 2.给出一个2阶滑动平均模型x(n)=u(n)+u(n-1)+u(n-2),u(n)为方差为1的高斯白噪声，用一个AR(10)阶模型估计其功率谱
clear;%清除内存变量
clc;%清屏
close;
%=================================================================
%估计2阶自回归模型的功率谱
%步骤1：建立信号模型，产生观测数据 x
u = randn(1,1000);%产生均值为0，方差为1的高斯白噪声u，数据长度为1000
a0 = [1 0 0.81];
x = filter(1,a0,u);
%画出信号x的功率谱,Sxx(exp(j*w))=var/abs(1+sum(ak*exp(-j*w*k)))^2,求和范围为从1到2，系数ak为给定
%的模型参量0，0.81
w = linspace(-pi,pi,2000);%将-pi到pi均分为2000等分
for mm = 1:2000
    c = w(mm);
    S(mm) = 1/(abs(1+a0(2:3)*exp(-j*c*(1:2))'))^2;
end
figure(1);
subplot(1,2,1);
plot(w,S,'r');%根据已知参量画出信号x的功率谱
xlabel('角频率/rad');
ylabel('x的功率谱');
title('已知参量-AR模型的功率谱');
%步骤2：用AR(p)阶模型估计上面的2阶自回归模型，画出功率谱并与用已知参量画出的功率谱比较
p = 2;%用于估计2阶自回归模型的AR模型的阶数
[a_p var_p] = Levinson_Durbin(x,p);%调用子函数迭代计算p阶AR模型的系数向量a_p，预测误差功率var_p
%根据L-D算法迭代计算出AR模型系数和预测误差功率画出信号x的功率谱
for mm = 1:2000
    c = w(mm);
    Sxx(mm) = var_p/(abs(1+a_p(2:p+1)*exp(-j*c*(1:p))'))^2;
end
hold on
subplot(1,2,2);
plot(w,Sxx,'--');
xlabel('角频率/rad');
ylabel('x的功率谱');
title('迭代参量-AR模型的功率谱');
%==========================================================================
%估计2阶滑动平均模型的功率谱
%步骤1：建立信号模型，产生观测数据 x
% clear;
u1 = randn(1,1000);%产生均值为0，方差为1的高斯白噪声u，数据长度为1000
b0 = [1 1 1];
x1 = filter(b0,1,u1);%信号模型，白噪声通过MA(2)阶系统x(n)=u(n)+u(n-1)+u(n-2)
%根据已知信号参量画出信号x的功率谱，S = var*abs(sum(bk*exp(-j*w*k)))^2
for mm = 1:2000
    c = w(mm);
    S1(mm) = (abs(b0*exp(-j*c*(0:2))'))^2;
end
figure(2);
subplot(1,2,1);
plot(w,S1,'r');%根据已知参量画出信号x的功率谱
xlabel('角频率/rad');
ylabel('x的功率谱');
title('已知参量-MA模型的功率谱');
%步骤2：用AR(p)阶模型估计上面的2阶滑动平均模型，画出功率谱并与用已知参量画出的功率谱比较
p1 = 60;%用于估计2阶滑动平均模型的AR模型的阶数
[a_p1 var_p1] = Levinson_Durbin(x1,p1);%调用子函数迭代计算p阶AR模型的系数向量a_p，预测误差功率var_p
%根据L-D算法迭代计算出AR模型系数和预测误差功率画出信号x的功率谱
for mm = 1:2000
    c = w(mm);
    Sxx1(mm) = var_p1/(abs(1+a_p1(2:p1+1)*exp(-j*c*(1:p1))'))^2;
end
hold on
subplot(1,2,2);
plot(w,Sxx1,'--');
xlabel('角频率/rad');
ylabel('x的功率谱');
title('迭代参量-MA模型的功率谱');